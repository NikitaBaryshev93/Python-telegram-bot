# -*- coding: utf-8 -*-
"""database

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJ_DvNoJynf9yyaBSb9G04LSuvXUAzlE
"""

# database.py
import aiosqlite
import logging
from config import DB_NAME
from aiogram import Bot, types  # –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞ –∏ –µ–≥–æ —Ç–∏–ø–æ–≤

async def create_tables():
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            await db.execute('''CREATE TABLE IF NOT EXISTS quiz_state (
                              user_id INTEGER PRIMARY KEY,
                              question_index INTEGER,
                              score INTEGER DEFAULT 0)''')  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ score
            await db.execute('''CREATE TABLE IF NOT EXISTS quiz_results (
                              user_id INTEGER PRIMARY KEY,
                              last_score INTEGER)''')
            await db.commit()
            logging.info("Database tables created or checked successfully.")

        except aiosqlite.Error as e:
            logging.error(f"Error creating database tables: {e}")

async def get_quiz_index(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            async with db.execute('SELECT question_index FROM quiz_state WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else 0
        except aiosqlite.Error as e:
            logging.error(f"Error getting quiz index for user {user_id}: {e}")
            return 0


async def update_quiz_index(user_id, index):
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index, score) VALUES (?, ?, ?) ON CONFLICT(user_id) DO UPDATE SET question_index = ?, score = score', (user_id, index, await get_user_score(user_id), index)) # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç
            await db.commit()
            logging.info(f"User {user_id}: Quiz index updated to {index}")
        except aiosqlite.Error as e:
            logging.error(f"Error updating quiz index for user {user_id}: {e}")



async def get_user_score(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            async with db.execute('SELECT score FROM quiz_state WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else 0
        except aiosqlite.Error as e:
            logging.error(f"Error getting score for user {user_id}: {e}")
            return 0


async def update_user_score(user_id, score):
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index, score) VALUES (?, ?, ?) ON CONFLICT(user_id) DO UPDATE SET score = ?', (user_id, await get_quiz_index(user_id), score, score))
            await db.commit()
            logging.info(f"User {user_id}: Score updated to {score}")
        except aiosqlite.Error as e:
            logging.error(f"Error updating score for user {user_id}: {e}")

async def save_quiz_result(user_id):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final_score = await get_user_score(user_id)
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            await db.execute('INSERT OR REPLACE INTO quiz_results (user_id, last_score) VALUES (?, ?)', (user_id, final_score))
            await db.commit()
            logging.info(f"User {user_id}: Quiz result saved with score {final_score}")
        except aiosqlite.Error as e:
            logging.error(f"Error saving quiz result for user {user_id}: {e}")

async def show_leaderboard(message:types.Message, bot:Bot):  # –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç bot —Ç–∏–ø–∞ Bot
    async with aiosqlite.connect(DB_NAME) as db:
        try:
            async with db.execute('SELECT user_id, last_score FROM quiz_results ORDER BY last_score DESC LIMIT 5') as cursor:
                leaders = await cursor.fetchall()

            leaderboard = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
            for i, (user_id, score) in enumerate(leaders, 1):
                try:
                    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=user_id) # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                    if chat_member.status != "left" and chat_member.status != "kicked": # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—à–µ–ª –∏–ª–∏ –µ–≥–æ –Ω–µ –≤—ã–≥–Ω–∞–ª–∏
                        user = chat_member.user
                        leaderboard += f"{i}. {user.username or user.first_name or user.id}: {score} –±–∞–ª–ª–æ–≤\n" # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–ª–∏ –∏–º–µ–Ω–∏ –æ—Ç—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    else:
                        leaderboard += f"{i}. User ID: {user_id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç): {score} –±–∞–ª–ª–æ–≤\n" # –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å, —Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                except Exception as e:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    leaderboard += f"{i}. User ID: {user_id} (–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è): {score} –±–∞–ª–ª–æ–≤\n"

            return leaderboard

        except aiosqlite.Error as e:
            logging.error(f"Error showing leaderboard: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤."