# -*- coding: utf-8 -*-
"""handlers

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cBQlBd7uU2-Yzi5ElcMH04lDosn0diCD
"""

# handlers.py
import logging
from aiogram import types, F, Bot
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database import get_quiz_index, update_quiz_index, get_user_score, update_user_score, save_quiz_result, show_leaderboard
from quiz_data import quiz_data
from keyboards import generate_options_keyboard
from config import API_TOKEN

bot = Bot(token=API_TOKEN) # –ë–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ (—Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
async def answer_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected_option = int(callback.data.split('_')[1])

    current_question_index = await get_quiz_index(user_id)
    correct_option = quiz_data[current_question_index]['correct_option']

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    score = await get_user_score(user_id)
    logging.info(f"User {user_id}: Current score = {score}")

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if selected_option == correct_option:
        await callback.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        score += 1
        logging.info(f"User {user_id}: Correct answer! New score = {score}")
        await update_user_score(user_id, score)
    else:
        correct_answer = quiz_data[current_question_index]['options'][correct_option]
        await callback.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        logging.info(f"User {user_id}: Incorrect answer. Score remains {score}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)

    if current_question_index < len(quiz_data):
        await send_question(callback.message, user_id)
    else:
        await callback.message.answer("üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await save_quiz_result(user_id)
        leaderboard = await show_leaderboard(callback.message, bot) # # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –∏–∑ –ë–î, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–æ—Ç–∞.
        await callback.message.answer(leaderboard) # –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∫–≤–∏–∑"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–±–æ—Ç! üéÆ", reply_markup=builder.as_markup(resize_keyboard=True))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(message, user_id):
    current_index = await get_quiz_index(user_id)
    question = quiz_data[current_index]
    keyboard = generate_options_keyboard(question['options'])
    await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(quiz_data)}:\n\n{question['question']}", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
    await update_user_score(user_id, 0)
    logging.info(f"User {user_id}: Starting new quiz. Score reset to 0.")
    await message.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑!")
    await send_question(message, user_id)